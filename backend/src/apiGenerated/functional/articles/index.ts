/**
 * @packageDocumentation
 * @module api.functional.articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type { Article } from '../../../api/articles/articles.entity';
import type { ArticleDtoBis } from '../../../api/articles/dto/article.dto';
import type { TId } from '../../../services/database/entities/user.entity';

/**
 * @controller ArticleController.getAll
 * @path GET /articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getAll(connection: IConnection): Promise<getAll.Output> {
  return PlainFetcher.fetch(connection, {
    ...getAll.METADATA,
    path: getAll.path(),
  } as const);
}
export namespace getAll {
  export type Output = Primitive<Array<Article>>;

  export const METADATA = {
    method: 'GET',
    path: '/articles',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return `/articles`;
  };
}

/**
 * @controller ArticleController.getById
 * @path GET /articles/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getById(
  connection: IConnection,
  id: TId,
): Promise<getById.Output> {
  return PlainFetcher.fetch(connection, {
    ...getById.METADATA,
    path: getById.path(id),
  } as const);
}
export namespace getById {
  export type Output = Primitive<null | ArticleDtoBis>;

  export const METADATA = {
    method: 'GET',
    path: '/articles/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: TId): string => {
    return `/articles/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller ArticleController.create
 * @path POST /articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(connection: IConnection): Promise<create.Output> {
  return PlainFetcher.fetch(connection, {
    ...create.METADATA,
    path: create.path(),
  } as const);
}
export namespace create {
  export type Output = Primitive<Article>;

  export const METADATA = {
    method: 'POST',
    path: '/articles',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return `/articles`;
  };
}

/**
 * @controller ArticleController.update
 * @path PUT /articles/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(connection: IConnection, id: TId): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...update.METADATA,
    path: update.path(id),
  } as const);
}
export namespace update {
  export const METADATA = {
    method: 'PUT',
    path: '/articles/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: TId): string => {
    return `/articles/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller ArticleController.delete
 * @path DELETE /articles/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function $delete(connection: IConnection, id: TId): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...$delete.METADATA,
    path: $delete.path(id),
  } as const);
}
export namespace $delete {
  export const METADATA = {
    method: 'DELETE',
    path: '/articles/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: TId): string => {
    return `/articles/${encodeURIComponent(id ?? 'null')}`;
  };
}
