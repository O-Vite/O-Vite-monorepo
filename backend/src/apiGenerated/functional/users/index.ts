/**
 * @packageDocumentation
 * @module api.functional.users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { UpdateResult } from "typeorm/query-builder/result/UpdateResult";

import type { CreateUserDto, UpdateUserDto, UserDb, UserDto } from "../../../services/database/entities/user.entity";

/**
 * @controller UsersController.create
 * @path POST /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    createUserDto: create.Input,
): Promise<create.Output> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...create.METADATA,
            path: create.path(),
        } as const,
        createUserDto,
    );
}
export namespace create {
    export type Input = Primitive<CreateUserDto>;
    export type Output = Primitive<UserDto>;

    export const METADATA = {
        method: "POST",
        path: "/users",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/users`;
    }
}

/**
 * @controller UsersController.findAll
 * @path GET /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAll(
    connection: IConnection,
): Promise<findAll.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...findAll.METADATA,
            path: findAll.path(),
        } as const,
    );
}
export namespace findAll {
    export type Output = Primitive<Array<UserDb>>;

    export const METADATA = {
        method: "GET",
        path: "/users",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/users`;
    }
}

/**
 * @controller UsersController.findOne
 * @path GET /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findOne(
    connection: IConnection,
    id: string,
): Promise<findOne.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...findOne.METADATA,
            path: findOne.path(id),
        } as const,
    );
}
export namespace findOne {
    export type Output = Primitive<null | UserDb>;

    export const METADATA = {
        method: "GET",
        path: "/users/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string): string => {
        return `/users/${encodeURIComponent(id ?? "null")}`;
    }
}

/**
 * @controller UsersController.update
 * @path PATCH /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
    connection: IConnection,
    id: string,
    updateUserDto: update.Input,
): Promise<update.Output> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...update.METADATA,
            path: update.path(id),
        } as const,
        updateUserDto,
    );
}
export namespace update {
    export type Input = Primitive<UpdateUserDto>;
    export type Output = Primitive<UpdateResult>;

    export const METADATA = {
        method: "PATCH",
        path: "/users/:id",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string): string => {
        return `/users/${encodeURIComponent(id ?? "null")}`;
    }
}

/**
 * @controller UsersController.remove
 * @path DELETE /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function remove(
    connection: IConnection,
    id: string,
): Promise<remove.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...remove.METADATA,
            path: remove.path(id),
        } as const,
    );
}
export namespace remove {
    export type Output = Primitive<string>;

    export const METADATA = {
        method: "DELETE",
        path: "/users/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string): string => {
        return `/users/${encodeURIComponent(id ?? "null")}`;
    }
}